// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  LECTURER
  STUDENT
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  loginId   String   @unique @default(uuid())
  password  String
  createdAt DateTime @default(now())
  isActive  Boolean  @default(false)
  role      Role
  Otp       Otp[]

  @@map("users")
}

model Student {
  id          Int                     @id @default(autoincrement())
  studentId   String                  @unique @default(uuid())
  firstName   String
  lastName    String
  email       String                  @unique
  assignments StudentsOnAssignments[]

  @@map("students")
}

model Lecturer {
  id         Int          @id @default(autoincrement())
  staffId    String       @unique @default(uuid())
  firstName  String
  lastName   String
  email      String       @unique
  Assignment Assignment[]

  @@map("lecturers")
}

model Otp {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [loginId])
  userId        String
  otpCode       String
  otpExpiration DateTime?
  createdAt     DateTime  @default(now())

  @@map("otps")
}

model Assignment {
  id          Int                     @id @default(autoincrement())
  title       String
  deadline    String
  description String
  course      String
  lecturerId  String
  createdBy   Lecturer                @relation(fields: [lecturerId], references: [staffId], onDelete: Cascade)
  uniqueCode  String?                 @unique
  isPublished Boolean
  updatedAt   DateTime?               @updatedAt
  students    StudentsOnAssignments[]

  @@map("assignments")
}

model StudentsOnAssignments {
  student      Student    @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  studentId    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId Int
  status       Boolean

  @@unique([studentId, assignmentId])
}
